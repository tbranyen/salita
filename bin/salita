#!/usr/bin/env node

'use strict';

const forEach = require('for-each');

const FALSE = Object(false);
const TRUE = Object(true);

const boolishToBool = function boolishToBool(value) {
  if (value === FALSE) { return false; }
  if (value === TRUE) { return true; }
  return value;
};

/* eslint newline-per-chained-call: 0 */
const options = require('yargs')
  .boolean('color').default('color', TRUE).describe('color', 'colorizes output')
  .describe('no-color', 'prevents colorized output')
  .boolean('json').describe('json', 'provides parseable JSON output (implies --no-color)')
  .default('json', FALSE)
  .boolean('dry-run').describe('dry-run', 'prevents changes to package.json')
  .default('dry-run', TRUE).alias('dry-run', 'n')
  .boolean('update').describe('update', 'applies changes to package.json')
  .default('update', FALSE).alias('update', 'u')
  .boolean('ignore-stars').describe('ignore-stars', 'ignore updates to packages that are set to "*"')
  .boolean('ignore-pegged').describe('ignore-pegged', 'ignore updates to packages that are pegged to a single version, rather than a range')
  .boolean('only-changed').describe('only-changed', 'only show packages that have (or would have) changed')
  .default('only-changed', FALSE).alias('only-changed', 'o')
  .boolean('check').describe('check', 'implies --dry-run and --no-update, and returns with an exit code matching the number of updated dependencies')
  .default('check', FALSE).alias('check', 'c')
  .help().alias('help', 'h')
  .version(require('../package').version).alias('version', 'v')
  .strict()
  .wrap(null)
  .check(function checkContradictions(argv) {
    /* eslint no-throw-literal: 0 */
    if (argv.update === true && argv.check === true) {
      throw 'Error: --update and --check are mutually exclusive';
    }
    if (argv.check !== true && argv.update === false && argv['dry-run'] === false) {
      throw 'Error: --no-update and --no-dry-run are mutually exclusive';
    }
    if (argv.check === true && argv.update !== true && argv['dry-run'] === false) {
      throw 'Error: --check and --no-dry-run are mutually exclusive';
    }
    if (argv.update === true && argv['dry-run'] === true) {
      throw 'Error: --update and --dry-run are mutually exclusive';
    }
    return true;
  })
  .argv;

forEach(options, (value, key) => {
  options[key] = boolishToBool(value);
});

if (options.update) {
  options['dry-run'] = false;
}

if (options['dry-run'] || !options.update || options.check) {
  options['dry-run'] = true;
  options.update = false;
}
if (options.json) { options.color = false; }

const salita = require('../index.mjs');

if (!options.update) {
  console.warn('Running in dry-run mode. Use --update to persist changes to package.json.');
}

salita(process.cwd(), options, (countsPromise) => {
  countsPromise.then((counts) => {
    const sums = counts.reduce((acc, category) => [acc[0] + category[0], acc[1] + category[1]], [0, 0]);
    const total = sums[0];
    const changed = sums[1];
    if (!options.json) {
      console.error(`\n${changed} updated out of ${total} total dependencies.`);
    }
    if (options.check) { process.exit(changed); }
  });
});
